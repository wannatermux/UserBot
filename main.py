#!/usr/bin/python
# -*- coding: utf-8 -*-
import pip

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import time, random, datetime, asyncio, sys, wikipedia, logging, aiohttp, pyrogram, os, wget, bs4, requests, gtts, colorama, youtube_dl, db0mb3r, configparser
except ModuleNotFoundError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π...\n")
    pip.main(['install', 'tgcrypto'])
    pip.main(['install', 'pyrogram'])
    pip.main(['install', 'aiohttp'])
    pip.main(['install', 'wikipedia'])
    pip.main(['install', 'logging'])
    pip.main(['install', 'wget'])
    pip.main(['install', 'bs4'])
    pip.main(['install', 'requests'])
    pip.main(['install', 'gtts'])
    pip.main(['install', 'colorama'])
    pip.main(['install', 'youtube_dl'])
    pip.main(['install', 'db0mb3r'])
    pip.main(['install', 'configparser'])
    import os
    os.execl(sys.executable, sys.executable, *sys.argv)
    quit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
config = os.path.exists('config.ini')
if config == True:
    print("work")
else:
    with open("config.ini", "w+") as f:
        rep = """[pyrogram]
api_id = 2860432
api_hash = 2fde6ca0f8ae7bb58844457a239c7214
device_model = subscribe t.me/privatesoft0|

"""
        repo = str(rep)
        f.write(repo)
        f.close()

from pyrogram import Client, filters
from pyrogram.errors import FloodWait, ChatSendMediaForbidden
from pyrogram.types import Message, ChatPermissions
from pyrogram.handlers import MessageHandler
from pyrogram.methods.chats.get_chat_members import Filters as ChatMemberFilters
from time import sleep, perf_counter, time
from aiohttp import ClientSession
from bs4 import BeautifulSoup
import time, random, datetime, asyncio, sys, wikipedia, requests, json, colorama, requests, youtube_dl, subprocess, configparser
from gtts import gTTS

start = os.path.exists('start.ogg')
if start == True:
    print("work...")
else:
    url = 'https://github.com/A9FM/filesUB/blob/main/start.ogg?raw=true'
    wget.download(url, '')

stop = os.path.exists('stop.ogg')
if stop == True:
    print("work...")
else:
    url = 'https://github.com/A9FM/filesUB/blob/main/stop.ogg?raw=true'
    wget.download(url, '')

update = os.path.exists('update.ogg')
if update == True:
    print("work...")
else:
    url = 'https://github.com/A9FM/filesUB/blob/main/update.ogg?raw=true'
    wget.download(url, '')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
rep = os.path.exists('rep.txt')
if rep == True:
    print("work...")
else:
    with open("rep.txt", "w+") as f:
        rep = "0"
        repo = str(rep)
        f.write(repo)
        f.close()

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–æ–ø
config_path = os.path.join(sys.path[0], 'config.ini')
config = configparser.ConfigParser()
config.read(config_path)

def get_prefix():
    prefix = config.get("prefix", "prefix")
    return prefix

try:
    prefix = get_prefix()

except Exception as e:
    config.add_section("prefix")
    config.set('prefix', 'prefix', '.')
    with open(config_path, "w") as config_file:
        config.write(config_file)
    prefix = '.'

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
os.system('cls' if os.name == 'nt' else 'clear')

logo = """\033[31m
  ____ _     ___ _____
 / ___| |   |_ _|  _  |
| |   | |    | || |_) |
| |___| |___ | ||  ___|
 \____|_____|___|_|

\033[34m
Telegram –ö–∞–Ω–∞–ª - @privatesoft0
–ü–æ–º–æ—â—å - @wannatermux
–í–µ—Ä—Å–∏—è 1.9.1 [–†–ï–õ–ò–ó]

–õ–æ–≥–∏:"""
print(logo)

# –õ–æ–≥–∏ + –í—Ö–æ–¥
app = Client("my_account")
import logging

logi = "‚ï≠ –õ–æ–≥–∏\n‚îÉ "

# –í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É [–û–±–Ω–æ–≤–ª–µ–Ω–∏—è]
with app:
         app.join_chat('privatesoft0') # –ü—Ä–æ—à—É, –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

# –î–æ–ø –∫–æ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
with app:
         app.unblock_user("ClipUSERBOT_LOGGERbot")
         nowe = datetime.datetime.now()
         timnowe = nowe.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
         startlog = logi + timnowe + "\n‚ï∞ –Æ–∑–µ—Ä–±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
         app.send_message("ClipUSERBOT_LOGGERbot", startlog)


         if len(sys.argv) == 4:
             try:
                 restart_type = sys.argv[3]
                 if restart_type == '1':
                    app.send_audio(sys.argv[1], "update.ogg", '<code>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ!</code>')
                 else:
                    app.send_audio(sys.argv[1], "start.ogg", '<code>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞!</code>')
             except:
                pass



# –ü–æ–º–æ—â—å | –ò–Ω—Ñ–∞ –ø—Ä–æ –Æ–∑–µ—Ä–±–æ—Ç–∞
@app.on_message(filters.command("help", prefix) & filters.me)
async def help(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit("""<b><a href="https://t.me/privatesoft0">ü§ñ UserBot 1.9.1 [–†–ï–õ–ò–ó] ü§ñ</a></b>
<b><a href="https://t.me/TransNibber">üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å üë®‚Äçüíª</a></b>

„Äé–û—Å–Ω–æ–≤–Ω—ã–µ„Äè
‚áõ <code>help</code> - –ü–æ–º–æ—â—å | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
‚áõ <code>ping</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–∏–Ω–≥–∞ –Æ–∑–µ—Ä–±–æ—Ç–∞ [–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª–∫–ª—é—á–µ–Ω–∏—è]
‚áõ <code>restart</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ [–û—à–∏–±–∫–∞, –ë–∞–≥ –≤ –Æ–∑–µ—Ä–±–æ—Ç–µ]
‚áõ <code>update</code> - –û–±–Ω–æ–≤–∏—Ç—å
‚áõ <code>beta</code> - –û–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ [–†–ï–õ–ò–ó]
‚áõ <code>sp</code> [–°–∏–º–≤–æ–ª] - –°–º–µ–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–∑–Ω–∞–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –∫–æ–º–º–∞–Ω–¥)

„Äé–ú–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–∏„Äè
‚áõ <code>afk</code> [–ü—Ä–∏—á–∏–Ω–∞] - –í–≤–æ–π—Ç–∏ –≤ –ê–§–ö [–ù–µ –≤ —Å–µ—Ç–∏]
‚áõ <code>unafk</code> - –í—ã–π—Ç–∏ –∏–∑ –ê–§–ö
‚áõ <code>wiki</code> [–°–ª–æ–≤–æ] - –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
‚áõ <code>weather</code> [–ì–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞

„Äé–¢—Ä–æ–ª–ª–∏–Ω–≥„Äè
‚áõ <code>hack</code> - –í–∑–ª–æ–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–Ω–∞
‚áõ <code>jopa</code> - –í–∑–ª–æ–º –∂–æ–ø—ã
‚áõ <code>mum</code> - –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏
‚áõ <code>drugs</code> - –ü—Ä–∏–Ω—è—Ç—å 3a–ü—ÄE—âEHHblE B–µ—âECTB–∞
‚áõ <code>bomber</code> - –ó–∞–ø—É—Å–∫ –ë–æ–º–±–µ—Ä–∞ (–°–∞–π—Ç)
‚áõ <code>bbomber</code> [–ù–æ–º–µ—Ä –±–µ–∑ –∑–Ω–∞–∫–∞ +] - –ó–∞–ø—É—Å–∫ –±–æ–º–±–µ—Ä–∞ (–±–æ—Ç—ã)
‚áõ <code>sbomber</code> - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–±–æ—Ç—ã –±–æ–º–±–µ—Ä–∞

„Äé–ü–ª—é—à–∫–∏„Äè
‚áõ <code>type</code> - –≠—Ñ—Ñ–µ–∫—Ç –ü–µ—á–∞—Ç–∏
‚áõ <code>hide</code> - –°–æ–æ–±—â–µ–Ω–∏—è —Å –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ–º
‚áõ <code>sw</code> - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å–∫–ª–∞–¥–∫–∏ [–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ —Ç–∏–ø—É ghbdtn]
‚áõ <code>short</code> [–°—Å—ã–ª–∫–∞] - —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫
‚áõ <code>tagall</code> [–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö] - –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚áõ <code>id</code> - –ê–π–¥–∏
‚áõ <code>info</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚áõ <code>infofull</code> - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚áõ <code>qr</code> [–¢–µ–∫—Å—Ç] - –°–æ–∑–¥–∞–Ω–∏–µ QR-–ö–æ–¥–∞ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º
‚áõ <code>time</code> - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
‚áõ <code>ladder</code> - —Ç–µ–∫—Å—Ç –ª–µ—Å–µ–Ω–∫–æ–π (–ø –ø—Ä –ø—Ä–∏ –ø—Ä–∏–≤ –ø—Ä–∏–≤–µ—Ç)
‚áõ <code>webshot</code> [–°—Å—ã–ª–∫–∞] - –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞
‚áõ <code>autoread</code> - –ê–≤—Ç–æ-—á—Ç–µ–Ω–∏–µ (–Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —ç—Ç–æ–≥–æ —á–∞—Ç–∞)
‚áõ <code>spam</code> [–ö–æ–ª-–≤–æ —Å–º—Å] [–í—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö] [–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è] - –°–ø–∞–º
‚áõ <code>yt</code> [—Å—Å—ã–ª–∫–∞] - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ (—é—Ç—É–±, —Ç–∏–∫—Ç–æ–∫, –ª–∞–π–∫, –∏–Ω—Å—Ç–∞)
‚áõ <code>myt</code> [—Å—Å—ã–ª–∫–∞] - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∞ –∑–≤—É–∫–∞ —Å –≤–∏–¥–µ–æ (—é—Ç—É–±, —Ç–∏–∫—Ç–æ–∫, –ª–∞–π–∫, –∏–Ω—Å—Ç–∞)
‚áõ <code>q</code> [–û—Ç–≤–µ—Ç] - –°–¥–µ–ª–∞—Ç—å —Ü–∏—Ç–∞—Ç—É (–°—Ç–∏–∫–µ—Ä —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
‚áõ <code>spamban</code> [–û—Ç–≤–µ—Ç] - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚áõ <code>voice</code> [–¢–µ–∫—Å—Ç] - –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ
‚áõ <code>text</code> [–û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ] - –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
‚áõ <code>cl</code> [–¢–µ–∫—Å—Ç] - –®–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ [–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ CLIP]

„Äé–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è„Äè
‚áõ <code>ban</code> - –ë–∞–Ω
‚áõ <code>unban</code> - –†–∞–∑–±–∞–Ω
‚áõ <code>kick</code> - –ö–∏–∫
‚áõ <code>mute</code> - –ú—É—Ç
‚áõ <code>unmute</code> - –†–∞–∑–º—É—Ç
‚áõ <code>admin</code> - –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
‚áõ <code>unadmin</code> - –†–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ê–¥–º–∏–Ω–∞
‚áõ <code>invite</code> (–Æ–∑–µ–π—Ä–Ω–µ–π–º - @) - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ —á–∞—Ç
‚áõ <code>kickall</code> - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å —á–∞—Ç–∞
‚áõ <code>kickall hide</code> - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö (—Å–∫—Ä—ã—Ç–æ)
‚áõ <code>leave</code> - –í—ã–π—Ç–∏ —Å —á–∞—Ç–∞
‚áõ <code>pin</code> - –ó–∞–∫—Ä–µ–ø–∏—Ç—å
‚áõ <code>unpin</code> - –û—Ç–∫—Ä–µ–ø–∏—Ç—å

[–†–µ–ø—É—Ç–∞—Ü–∏—è, –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—Ä–æ—Å–∏—Ç–µ 2 —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "+"]

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–∏—à–∏ @TransNibber""", disable_web_page_preview=True)

async def restart(message: Message, restart_type):
    if restart_type == 'update': text = '1'
    else: text = '2'
    try:
        await os.execvp("python3", ["python3", "bot.py", f"{message.chat.id}",  f" {message.message_id}", f"{text}"])
    except:
        await os.execvp("python", ["python", "bot.py", f"{message.chat.id}",  f" {message.message_id}", f"{text}"])

@app.on_message(filters.command('restart', prefix) & filters.me)
async def restartt(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –Æ–∑–µ—Ä–±–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.delete()
    await app.send_audio(message.chat.id, "stop.ogg", '<code>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...</code>')
    await restart(message, restart_type='restart')

@app.on_message(filters.command("update", prefix) & filters.me)
async def updatte(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –Æ–∑–µ—Ä–±–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit('<code>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</code>')
    os.remove("bot.py")
    url = 'https://raw.githubusercontent.com/A9FM/ClipUserbot/main/bot.py'
    wget.download(url, '')
    await restart(message, restart_type='update')

@app.on_message(filters.command("beta", prefix) & filters.me)
async def beta(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –Æ–∑–µ—Ä–±–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω [–ë–µ—Ç–∞]"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit('<code>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –±–µ—Ç–∞ –≤–µ—Ä—Å–∏—é...</code>')
    os.remove("bot.py")
    url = 'https://raw.githubusercontent.com/A9FM/ClipUserbot/beta/bot.py'
    wget.download(url, '')
    await restart(message, restart_type='update')

# –ü—Ä–µ—Ñ–∏–∫—Å
@app.on_message(filters.command("sp", prefix) & filters.me)
async def pref(client: Client, message: Message):
    if len(message.command) > 1:
        prefix = message.command[1]

        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –ü—Ä–µ—Ñ–∏–∫—Å –±—ã–ª —Å–º–µ–Ω—ë–Ω –Ω–∞ [ " + message.command[1] + " ]"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)

        print(message.command)
        config.set('prefix', 'prefix', prefix)
        with open(config_path, "w") as config_file:
            config.write(config_file)
        await message.edit(f'<b>–ü—Ä–µ—Ñ–∏–∫—Å [ <code>{prefix}</code> ] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏')
        await restart(message, restart_type='restart')
    else:
        await message.edit('<b>–ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º!</b>')

# –†–µ–ø—É—Ç–∞—Ü–∏—è
@app.on_message(filters.text & filters.incoming & filters.regex('^\-$') & filters.reply)
async def repMinus(client: Client, message: Message):
    try:
        if message.reply_to_message.from_user.is_self:

            now = datetime.datetime.now()
            timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
            l0g = logi + timnow + "\n‚ï∞ –†–µ–ø—É—Ç–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–Ω–∏–∂–µ–Ω–∞\n\n"

            with open("rep.txt", "r+") as f:
                data = f.read()
                data = int(data)
                num = 1
                rep = data - num
                repo = str(rep)
                f.close()
            with open("rep.txt", "w+") as f:
                repo = str(rep)
                f.write(repo)
                f.close()
                text = "üíî –í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é üíî\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
                await message.reply_text(text)
            log = l0g + "üíî –í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é üíî\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
            await app.send_message("ClipUSERBOT_LOGGERbot", log)
    except:
        pass

@app.on_message(filters.text & filters.incoming & filters.regex('^\+$') & filters.reply)
async def repPlus(client: Client, message: Message):
    try:
        if message.reply_to_message.from_user.is_self:

            now = datetime.datetime.now()
            timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
            l0g = logi + timnow + "\n‚ï∞ –†–µ–ø—É—Ç–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–≤—ã—à–µ–Ω–∞\n\n"

            with open("rep.txt", "r+") as f:
                data = f.read()
                data = int(data)
                num = 1
                rep = data + num
                repo = str(rep)
                f.close()
            with open("rep.txt", "w+") as f:
                repo = str(rep)
                f.write(repo)
                f.close()
                text = "‚ù§Ô∏è –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é ‚ù§Ô∏è\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
                await message.reply_text(text)
            log = l0g + "‚ù§Ô∏è –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é ‚ù§Ô∏è\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
            await app.send_message("ClipUSERBOT_LOGGERbot", log)
    except:
        pass

# –ê–π–¥–∏
@app.on_message(filters.command('id', prefix) & filters.me)
async def id(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ id"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if message.reply_to_message is None:
        await message.edit(f"–ê–π–¥–∏: {message.chat.id}")
    else:
        id = f"–ê–π–¥–∏: {message.reply_to_message.from_user.id}\n–ê–π–¥–∏ —á–∞—Ç–∞: {message.chat.id}"
        await message.edit(id)

# –ë–æ–º–±–µ—Ä
@app.on_message(filters.command('bomber', prefix) & filters.me)
async def b0mb3r(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—É—â–µ–Ω –±–æ–º–±–µ—Ä"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–º–±–µ—Ä")
    global bombe
    print("""
 _____                 _               
|  _  |               | |              
| |_) | ___  _ __ ___ | |__   ___ _ __ 
|  _ < / _ \| '_ ` _ \| '_ \ / _ \ '__|
| |_) | (_) | | | | | | |_) |  __/ |   
|____/ \___/|_| |_| |_|_.__/ \___|_|   
""")

    bombe = subprocess.Popen(["bomber"], stdout=subprocess.PIPE)
    await asyncio.sleep(5)
    await message.edit("–ë–æ–º–±–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: 127.0.0.1:8080")

@app.on_message(filters.command('sbomber', prefix) & filters.me)
async def sbomber(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ë–æ–º–±–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    bombe.terminate()
    await message.edit("–ë–æ–º–±–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–æ–±–æ—Ç—É...")

@app.on_message(filters.command('bbomber', prefix) & filters.me)
async def bbomber(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ bbomber –≤–∫–ª—é—á—ë–Ω"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    bomber = message.command[1]
    await app.send_message('BomberFree_bot', "/start")
    await app.send_message('couldboombot', "/start")
    await app.send_message('TNT_Robot', "/start")
    await message.edit("–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤")
    await asyncio.sleep(2)
    await app.send_message('couldboombot', "‚ö°Ô∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å Spam")
    await app.send_message('TNT_Robot', "üß® –ë–æ–º–±–∏—Ç—å")
    await asyncio.sleep(2)
    await app.send_message('BomberFree_bot', bomber)
    await app.send_message('couldboombot', bomber)
    await app.send_message('TNT_Robot', bomber + " 15")
    result = "–ë–æ–º–±–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä " + message.command[1]
    await message.edit(result)

# –í—Ä–µ–º—è
@app.on_message(filters.command('time', prefix) & filters.me)
async def time(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("%d.%m.%Y\n–í—Ä–µ–º—è %H:%M:%S")
    timenow = "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ : " + timnow
    await message.edit(timenow)

# –ß–∏—Ç—ã —Ä–µ–ø—É—Ç–∞—Ü–∏—è
@app.on_message(filters.command('rep', prefix) & filters.me)
async def repNakrutka(client: Client, message: Message):
    try:
        with open("rep.txt", "r+") as f:
            data = f.read()
            data = int(data)
            num = message.command[1]
            rep = num
            repo = str(rep)
            f.close()
        with open("rep.txt", "w+") as f:
            repo = str(rep)
            f.write(repo)
            f.close()
            text = "‚ù§Ô∏è –†–µ–ø—É—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ ‚ù§Ô∏è\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
            await message.edit(text)

        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –ù–∞–∫—Ä—É—á–µ–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è\n\n‚ù§Ô∏è –†–µ–ø—É—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ ‚ù§Ô∏è\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)
    except:
        pass

# –°–ø–∞–º
@app.on_message(filters.command('spam', prefix) & filters.me)
async def spam(client: Client, message: Message):
        if not message.text.split(prefix + 'spam', maxsplit=1)[1]:
                await message.edit('<i>–ö–æ–º–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</i>')
                return
        count = message.command[1]
        slep = message.command[2]
        text = ' '.join(message.command[3:])
        count = int(count)
        slep = int(slep)
        await message.delete()

        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –ó–∞–ø—É—â–µ–Ω —Å–ø–∞–º"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)

        for _ in range(count):
                await app.send_message(message.chat.id, text)
                await asyncio.sleep(slep)

# –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞
@app.on_message(filters.command('webshot', prefix) & filters.me)
async def webshot(client, message):
    try:
        if len(message.text.split()) < 2:
            await message.edit('<i>–ù–µ—Ç—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.</i>')
            return
        user_link = message.command[1]
        await message.delete()
        full_link = 'https://webshot.deam.io/{}/?width=1920&height=1080?type=png'.format(user_link)
        await client.send_photo(message.chat.id, full_link, caption=f'<b> –°—Å—ã–ª–∫–∞ ‚ü∂ {user_link}</b>')

        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)

    except:
        await message.edit('<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç.</i>')

# –í–∏–¥–µ–æ —Å —é—Ç—É–±
@app.on_message(filters.command("yt", prefix) & filters.me)
async def yt(client, message):
    linked = message.command[1]

    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
    ydl_opts = { 'outtmpl': 'video.mp4', }
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        ydl.download([linked])
    await message.edit("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ...")
    await client.send_video(chat_id=message.chat.id, video='video.mp4', caption="–û—Ä–∏–≥–∏–Ω–∞–ª: " + message.command[1])
    await message.delete()
    os.remove('video.mp4')

@app.on_message(filters.command("myt", prefix) & filters.me)
async def myt(client, message):

    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    myth = "youtube-dl -f 140 " + message.command[1] + " -o music.m4a"
    await message.edit("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...")
    os.system(myth)
    await message.edit("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...")
    await client.send_audio(chat_id=message.chat.id, audio='music.m4a', caption="–ó–≤—É–∫ —Å –≤–∏–¥–µ–æ: " + message.command[1])
    await message.delete()
    os.remove("music.m4a")

# –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö
@app.on_message(filters.command("tagall", prefix) & filters.me)
async def tagall(client, message):

    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –û—Ç–º–µ—á–µ–Ω—ã –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    slep = message.command[1]
    slep = int(slep)
    slepe = str(slep)
    args = ' ! '
    if len(message.text.split()) >= 2:
        args = message.text.split(prefix + 'tagall ' + slepe, maxsplit=1)[1]
    await message.delete()
    chat_id = message.chat.id
    string = ""
    limit = 1
    members = client.iter_chat_members(chat_id)
    async for member in members:
        tag = member.user.username
        if limit <= 9:
            list = ['·Ö†', '·Ö†']
            if tag != None:
                w = random.choice(list)
                string += f"<a href='https://t.me/{tag}'>{w}</a> "
            else:
                w = random.choice(list)
                string += f"<a href='tg://user?id={member.user.id}'>{w}</a> "
            limit += 1
        else:
            text = f"{args} | {string}"
            await client.send_message(chat_id, text, disable_web_page_preview=1)
            limit = 1
            string = ""
            await asyncio.sleep(slep)

# –£–¥–∞–ª–∏—Ç—å —Å–º—Å
@app.on_message(filters.command("del", prefix) & filters.me)
async def delete_messages(client: Client, message: Message):
    if message.reply_to_message:
        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)

        message_id = message.reply_to_message.message_id
        await message.delete()
        await client.delete_messages(message.chat.id, message_id)

# –ü—É—Ä–¥–∂
@app.on_message(filters.command('purge', prefix) & filters.me)
async def purge(client: Client, message: Message):
        if message.reply_to_message:
                now = datetime.datetime.now()
                timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
                log = logi + timnow + "\n‚ï∞ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
                await app.send_message("ClipUSERBOT_LOGGERbot", log)

                r = message.reply_to_message.message_id
                m = message.message_id
                msgs = []
                await message.delete()
                v = m - r
                while r != m:
                        msgs.append(int(r))
                        r += 1
                await client.delete_messages(message.chat.id, msgs)
                r = message.reply_to_message.message_id
                msgs = []
                while r != m:
                        msgs.append(int(r))
                        r += 1
                await client.delete_messages(message.chat.id, msgs)
                await app.send_message(message.chat.id, f'<b>–£–¥–∞–ª–µ–Ω–æ > {v} —Å–æ–æ–±—â–µ–Ω–∏–π!</b>')
        else:
                await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')

# –ö–æ–º–∞–Ω–¥–∞ type
@app.on_message(filters.command("type", prefix) & filters.me)
async def type(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–¥–∞ type"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    orig_text = message.text.split(prefix + "type ", maxsplit=1)[1]
    text = orig_text
    tbp = ""
    typing_symbol = "‚ñí"
    while(tbp != orig_text):
        try:
            joper = tbp + typing_symbol
            await message.edit(str(joper))
            await asyncio.sleep(0.10)
            tbp = tbp + text[0]
            text = text[1:]
            await message.edit(str(tbp))
            await asyncio.sleep(0.10)
        except FloodWait as e:
            await asyncio.sleep(e.x)

# –õ–µ—Å—Ç–Ω–∏—Ü–∞
@app.on_message(filters.command("ladder", prefix) & filters.me)
async def ladder(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ ladder"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    orig_text = message.text.split(prefix + "ladder ", maxsplit=1)[1]
    text = orig_text
    output = []
    for i in range(len(text) + 1):
     output.append(text[:i])
    ot = "\n".join(output)
    await message.edit(ot)

# Quotes
@app.on_message(filters.command("q", prefix) & filters.me)
async def quotly(client: Client, message: Message):
    if not message.reply_to_message:
        await message.edit("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –°–æ–∑–¥–∞–Ω–∞ —Ü–∏—Ç–∞—Ç–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit("–°–æ–∑–¥–∞—é —Ü–∏—Ç–∞—Ç—É....")
    await message.reply_to_message.forward("QuotLyBot")
    await asyncio.sleep(7)
    iii = await app.get_history("QuotLyBot")
    await message.delete()
    await app.forward_messages(message.chat.id, "QuotLyBot", iii[0].message_id)

# –ì–° –≤ —Ç–µ–∫—Å—Ç
@app.on_message(filters.command("text", prefix) & filters.me)
async def gstotext(client: Client, message: Message):
    if not message.reply_to_message:
        await message.edit("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ —Ç–µ–∫—Å—Ç"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit("–ü–∏—à—É —Ç–µ–∫—Å—Ç–æ–º...")
    await message.reply_to_message.forward("VoiceMsgBot")
    await asyncio.sleep(5)
    iii = await app.get_history("VoiceMsgBot")
    await message.edit("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞...")
    await app.forward_messages(message.chat.id, "VoiceMsgBot", iii[0].message_id)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
@app.on_message(filters.command("spamban", prefix) & filters.me)
async def spamban(client: Client, message: Message):

    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    await message.edit("–ß–µ–∫–∞—é —Ç–≤–æ–π –∞–∫–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
    await app.send_message('spambot', "/start")
    await asyncio.sleep(1)
    iii = await app.get_history("spambot")
    await message.delete()
    await app.forward_messages(message.chat.id, "spamBot", iii[0].message_id)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å –≥—Ä—É–ø–ø—ã (200 —É—á –ª–∏–º–∏—Ç) !!! –°–ö–†–´–¢–û
@app.on_message(filters.command('kickall hide', prefix) & filters.me)
def kickall(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –£–¥–∞–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏"
    app.send_message("ClipUSERBOT_LOGGERbot", log)

    message.delete()
    num = 0
    for all in client.iter_chat_members(message.chat.id):
       try:
           num =+ 1
           client.kick_chat_member(message.chat.id, all.user.id, 0)
       except:
           pass

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å –≥—Ä—É–ø–ø—ã (200 —É—á –ª–∏–º–∏—Ç)
@app.on_message(filters.command('kickall', prefix) & filters.me)
def kickall(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –£–¥–∞–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏"
    app.send_message("ClipUSERBOT_LOGGERbot", log)

    message.edit("–í–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ö–∞–Ω–∞)")
    num = 0
    for all in client.iter_chat_members(message.chat.id):
       try:
           num =+ 1
           client.kick_chat_member(message.chat.id, all.user.id, 0)
       except:
           pass

@app.on_message(filters.command("infofull", prefix) & filters.me)
async def info(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if message.reply_to_message:
        username = message.reply_to_message.from_user.username
        id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        user_link = message.reply_to_message.from_user.mention
        last_name = message.reply_to_message.from_user.last_name
        number = message.reply_to_message.from_user.phone_number
    else:
        username = message.from_user.username
        id = message.from_user.id
        first_name = message.from_user.first_name
        user_link = message.from_user.mention
        last_name = message.from_user.last_name
        number = message.from_user.phone_number

    text = f"""
‚ï≠ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
‚îÉ –ê–π–¥–∏: <code>{id}</code>
‚îÉ –ò–º—è: {first_name}
‚îÉ –§–∞–º–∏–ª–∏—è: {last_name}
‚îÉ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}
‚îÉ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞: {number}
‚ï∞ –°—Å—ã–ª–∫–∞: {user_link}"""
    await message.edit(text, parse_mode="HTML")

@app.on_message(filters.command("info", prefix) & filters.me)
async def info(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if message.reply_to_message:
        username = message.reply_to_message.from_user.username
        id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        user_link = message.reply_to_message.from_user.mention
    else:
        username = message.from_user.username
        id = message.from_user.id
        first_name = message.from_user.first_name
        user_link = message.from_user.mention

    text = f"""
‚ï≠ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
‚îÉ –ê–π–¥–∏: <code>{id}</code>
‚îÉ –ò–º—è: {first_name}
‚îÉ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}
‚ï∞ –°—Å—ã–ª–∫–∞: {user_link}"""
    await message.edit(text, parse_mode="HTML")

# –ü–∏–Ω–≥
@app.on_message(filters.command("ping", prefix) & filters.me)
async def ping(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ü–∏–Ω–≥"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    start = perf_counter()
    await message.edit('Pong')
    end = perf_counter()
    ping2 = end - start
    ping = ping2 * 1000

    if 0 <= ping <= 199:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\nüü¢–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –°—Ç–∞–±–∏–ª—å–Ω–æ–µüü¢')
    if 199 <= ping <= 400:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\nüü†–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –•–æ—Ä–æ—à–µ–µüü†')
    if 400 <= ping <= 600:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\nüî¥–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –ù–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µüî¥')
    if 600 <= ping:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\n‚ö†–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –ü–µ—Ä–µ–ø–∞–¥—ã —Å–≤—è–∑–∏‚ö†')

# –°–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫
linkToken = '6c2ac1846a1c1A2d5f88A3E5fbf0e14fcf96d7d0'
async def link_short(link: str):
    async with ClientSession(
        headers={
            'Authorization': f'API-Key {linkToken}'
        }
    ) as ses:
        async with ses.post(
            'https://api.waa.ai/v2/links',
            json={'url': link}
        ) as resp:
            return await resp.json()

@app.on_message(filters.command("short", prefix) & filters.me)
async def shorten_link_command(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞ —Å—Å—ã–ª–∫–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if message.reply_to_message:
         link = message.reply_to_message.text
    else:
        try:
            link = message.command[1]
        except IndexError:
            return await message.delete()
    output = (await link_short(link))["data"]
    await message.edit(f'–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {output["link"]}')

# QR-code
content_filter = filters.create(lambda _, __, msg: bool(get_cmd_content(msg)))

def get_cmd_content(message: Message):
    if message.reply_to_message:
        content = message.reply_to_message.text
    elif len(message.text.split(maxsplit=1)) == 2:
        content = message.text.split(maxsplit=1)[1]
    else:
        content = ''
    return content

@app.on_message(filters.command("qr", prefix) & filters.me & content_filter)
async def qr_cmd(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –°–æ–∑–¥–∞–Ω qr-code"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    text = get_cmd_content(message)
    await message.delete()
    async with ClientSession() as session:
        async with session.head('https://api.qrserver.com/v1/create-qr-code/', params={'data': text}) as resp:
            await app.send_photo(
                chat_id=message.chat.id,
                photo=str(resp.url),
                caption=text,
                parse_mode=None,
            )

# –í–∏–∫–∏–ø–µ–¥–∏—è
@app.on_message(filters.command("wiki", prefix) & filters.me)
async def wiki(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ü–æ–∏—Å–∫ –≤ –≤–∏–∫–∏–ø–µ–¥–∏–∏"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    lang = message.command[1]
    user_request = ' '.join(message.command[2:])
    await message.edit('<b>–ò—â–µ–º –∏–Ω—Ñ—É</b>')
    if user_request == '':
        wikipedia.set_lang("ru")
        user_request = ' '.join(message.command[1:])
    try:
        if lang == 'en':
            wikipedia.set_lang("en")

        result = wikipedia.summary(user_request)
        await message.edit(f'''<b>–°–ª–æ–≤–æ:</b>
<code>{user_request}</code>

<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b>
<code>{result}</code>''')
    except Exception as exc:
        await message.edit(f'''<b>Request:</b>
<code>{user_request}</code>
<b>Result:</b>
<code>{exc}</code>''')

# –ü–µ—Ä–µ–∫–ª—é—è–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
@app.on_message(filters.command("sw", prefix) & filters.me)
async def switch(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ sw"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    text = ' '.join(message.command[1:])
    ru_keys = """—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–Å"‚Ññ;%:?–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"""
    en_keys = """`qwertyuiop[]asdfghjkl;'zxcvbnm,./~@#$%^&QWERTYUIOP{}ASDFGHJKL:"|ZXCVBNM<>?"""
    if text == '':
        if message.reply_to_message:
            reply_text = message.reply_to_message.text
            change = str.maketrans(ru_keys + en_keys, en_keys + ru_keys)
            reply_text = str.translate(reply_text, change)
            await message.edit(reply_text)
        else:
            await message.edit('–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            await asyncio.sleep(3)
            await message.delete()
    else:
        change = str.maketrans(ru_keys + en_keys, en_keys + ru_keys)
        text = str.translate(text, change)
        await message.edit(text)

# –®–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.command("cl", prefix) & filters.me)
async def switch(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ cl"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    text = ' '.join(message.command[1:])
    ru_keys = """—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–Å"‚Ññ;%:?–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"""
    en_keys = """Áï∞È´îÂ≠ó‰Ωì‚ô¨‚ôù‚ôû‚ôüŒ≥Œ¥ŒµŒ∑Œ∏Œ∫ŒªŒºŒΩZXM‚à©SŒ¨·∫±·∫´ƒÉ«Ω·∫≥√üŒ≤–Ç‡∏ø‚Ñ¢ƒëƒè√ê√∞”ò“æŒ£ƒ§ƒ¶“§·∏¶ƒ•—õ“•·∏ß≈í≈ì√ò·ª¢$≈õ≈ü≈ù≈°·πß·π©·µ¥ÔÆê¬ß‚ôå‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôì‚úµ‚ú∂‚ú∑‚ú∏‚úπ"""
    if text == '':
        if message.reply_to_message:
            reply_text = message.reply_to_message.text
            change = str.maketrans(ru_keys + en_keys, en_keys + ru_keys)
            reply_text = str.translate(reply_text, change)
            await message.edit(reply_text)
        else:
            await message.edit('–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            await asyncio.sleep(3)
            await message.delete()
    else:
        change = str.maketrans(ru_keys + en_keys, en_keys + ru_keys)
        text = str.translate(text, change)
        await message.edit(text)

# –ü–æ–≥–æ–¥–∞
def get_pic(city):
    file_name = f'{city}.png'
    with open(file_name, 'wb') as pic:
        response = requests.get('http://wttr.in/{citys}_2&lang=ru.png', stream=True)

        if not response.ok:
            print(response)

        for block in response.iter_content(1024):
            if not block:
                break

            pic.write(block)
        return file_name

# –ü–æ–≥–æ–¥–∞
@app.on_message(filters.command("weather", prefix) & filters.me)
async def weather(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ü–æ–≥–æ–¥–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    city = message.command[1]
    await message.edit("```–ó–∞–≥—Ä—É–∑–∫–∞...```")
    r = requests.get(f"https://wttr.in/{city}?m?M?0?q?T&lang=ru")
    await message.edit(f"```City: {r.text}```")
    await client.send_photo(chat_id=message.chat.id, photo=get_pic(city), reply_to_message_id=message.message_id)
    os.remove(f'{city}.png')

# –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
@app.on_message(filters.command("m", prefix) & filters.me)
async def send_music(client: Client, message: Message):
    try:
        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)

        cmd = message.command

        song_name = ""
        if len(cmd) > 1:
            song_name = " ".join(cmd[1:])
        elif message.reply_to_message and len(cmd) == 1:
            song_name = (
                message.reply_to_message.text or message.reply_to_message.caption
            )
        elif not message.reply_to_message and len(cmd) == 1:
            await message.edit("–î–∞–π –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏")
            await asyncio.sleep(2)
            await message.delete()
            return

        song_results = await app.get_inline_bot_results("deezermusicbot", song_name)

        try:
            # send to Saved Messages because hide_via doesn't work sometimes
            saved = await app.send_inline_bot_result(
                chat_id="me",
                query_id=song_results.query_id,
                result_id=song_results.results[0].id,
                hide_via=True,
            )

            # forward as a new message from Saved Messages
            saved = await app.get_messages("me", int(saved.updates[1].message.id))
            reply_to = (
                message.reply_to_message.message_id
                if message.reply_to_message
                else None
            )
            await app.send_audio(
                chat_id=message.chat.id,
                audio=str(saved.audio.file_id),
                reply_to_message_id=reply_to,
            )

            # delete the message from Saved Messages
            await app.delete_messages("me", saved.message_id)
        except TimeoutError:
            await message.edit("That didn't work out")
            await asyncio.sleep(2)
        await message.delete()
    except Exception as e:
        print(e)
        await message.edit("`–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–∞`")
        await asyncio.sleep(2)
        await message.delete()

# –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å
lang_code = os.environ.get('lang_code', "ru")

@app.on_message(filters.command("voice", prefix) & filters.me)
async def voice(client, message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if len(message.text.split()) == 1:
        await message.edit(bantuan)
        return
    cust_lang = None
    await message.delete()
    await client.send_chat_action(message.chat.id, "record_audio")
    text = message.text.split(None, 1)[1]
    tts = gTTS(text, lang=lang_code)
    tts.save('voice.mp3')
    if message.reply_to_message:
        await client.send_voice(message.chat.id, voice="voice.mp3", reply_to_message_id=message.reply_to_message.message_id)
    else:
        await client.send_voice(message.chat.id, voice="voice.mp3")
    await client.send_chat_action(message.chat.id, action="cancel")
    os.remove("voice.mp3")

# AFK
async def afk_handler(client: Client, message: Message):
    try:
        global start, end
        end = datetime.datetime.now().replace(microsecond=0)
        afk_time = (end - start)
        if message.from_user.is_bot is False:
            await message.reply_text(f"<b>–Ø –ê–§–ö —É–∂–µ {afk_time}</b>\n"
                                     f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>")
    except NameError:
        pass

@app.on_message (filters.command("afk", prefix) & filters.me)
async def afk(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –í—Ö–æ–¥ –≤ –ê–§–ö —Ä–µ–∂–∏–º"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    global start, end, handler, reason
    start = datetime.datetime.now().replace(microsecond=0)
    handler = client.add_handler(MessageHandler(afk_handler, (filters.private & ~filters.me)))
    if len(message.text.split()) >= 2:
        reason = message.text.split(" ", maxsplit=1)[1]
    else:
        reason = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    await message.edit(f"<b>–¢–µ–ø–µ—Ä—å —è –ê–§–ö</b>\n"
                       f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>")

# No AFK
@app.on_message (filters.command("unafk", prefix) & filters.me)
async def unafk(client: Client, message: Message):
    try:
        now = datetime.datetime.now()
        timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
        log = logi + timnow + "\n‚ï∞ –í—ã—Ö–æ–¥ —Å –ê–§–ö —Ä–µ–∂–∏–º–∞"
        await app.send_message("ClipUSERBOT_LOGGERbot", log)

        global start, end
        end = datetime.datetime.now().replace(microsecond=0)
        afk_time = (end - start)
        await message.edit(f"<b>–Ø —Ç–µ–ø–µ—Ä—å –Ω–µ –ê–§–ö.\n<b>–ü–æ—á–µ–º—É –±—ã–ª (-–∞) –ê–§–ö:</b> <i>{reason}</i>\n–ë—ã–ª –≤ –∞—Ñ–∫ {afk_time}</b>")
        client.remove_handler(*handler)
        await restart(message, restart_type='restart')
        
    except NameError:
        await message.edit("<b>–Ø –Ω–µ –±—ã–ª –≤ –ê–§–ö</b>")
        await asyncio.sleep(3)
        await message.delete()

# –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.command("hide", prefix) & filters.me)
async def hide(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –°–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    orig_text = message.text.split(prefix + "hide ", maxsplit=1)[1]
    text = orig_text
    tbp = ""
    typing_symbol = "‚ñí"
    while(tbp != orig_text):
        try:
            joper = tbp + typing_symbol
            await message.edit(str(joper))
            await asyncio.sleep(0.10)
            tbp = tbp + text[0]
            text = text[1:]
            await message.edit(str(tbp))
            await asyncio.sleep(0.10)
        except FloodWait as e:
            await asyncio.sleep(e.x)

    await asyncio.sleep(1.25)
    await message.delete()

# –ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ
the_regex = r"^r\/([^\s\/])+"
f = filters.chat([])

@app.on_message(f)
async def auto_read(client: Client, message: Message):
    await app.read_history(message.chat.id)
    message.continue_propagation()

@app.on_message(filters.command("autoread", prefix) & filters.me)
async def add_to_auto_read(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if message.chat.id in f:
        f.remove(message.chat.id)
        await message.edit("–ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    else:
        f.add(message.chat.id)
        await message.edit("–ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

# –ê–¥–º–∏–Ω –∫–æ–º–º–∞–Ω–¥—ã
def get_arg(message):
    msg = message.text
    msg = msg.replace(" ", "", 1) if msg[1] == " " else msg
    split = msg[1:].replace("\n", " \n").split(" ")
    if " ".join(split[1:]).strip() == "":
        return ""
    return " ".join(split[1:])

def get_args(message):
    try:
        message = message.text
    except AttributeError:
        pass
    if not message:
        return False
    message = message.split(maxsplit=1)
    if len(message) <= 1:
        return []
    message = message[1]
    try:
        split = shlex.split(message)
    except ValueError:
        return message  # Cannot split, let's assume that it's just one long message
    return list(filter(lambda x: len(x) > 0, split))

async def CheckAdmin(message: Message):
    """Check if we are an admin."""
    admin = "administrator"
    creator = "creator"
    ranks = [admin, creator]

    SELF = await app.get_chat_member(
        chat_id=message.chat.id, user_id=message.from_user.id
    )

    if SELF.status not in ranks:
        await message.edit("__–Ø –Ω–µ –∞–¥–º–∏–Ω!__")
        await asyncio.sleep(2)
        await message.delete()

    else:
        if SELF.status is not admin or SELF.can_restrict_members:
            return True
        else:
            await message.edit("__–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤__")
            await asyncio.sleep(2)
            await message.delete()

@app.on_message(filters.command("leave", prefix) & filters.me)
async def leave(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –í—ã—Ö–æ–¥ —Å —á–∞—Ç–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    m = await message.edit('<code>–í—Å–µ–º –ø–æ–∫–∞... [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª —Å —á–∞—Ç–∞]</code>')
    await asyncio.sleep(2)
    await client.leave_chat(chat_id=message.chat.id)

@app.on_message(filters.command("ban", prefix) & filters.me)
async def ban_hammer(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–Ω –≤ –±–µ—Å–µ–¥–µ"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is True:
        reply = message.reply_to_message
        if reply:
            user = reply.from_user["id"]
        else:
            user = get_arg(message)
            if not user:
                await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ –∑–∞–±–∞–Ω–∏—Ç—å?**")
                return
        try:
            reply = message.reply_to_message
            await app.kick_chat_member(message.chat.id, reply.from_user.id, int(time.time() + 31536000))
            await message.edit(f'<b><a href="tg://user?id={reply.from_user.id}">{reply.from_user.first_name}</a> –∑–∞–±–∞–Ω–µ–Ω!</b>')
        except:
            await message.edit("**–Ø –Ω–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.**")
    else:
        await message.edit("**–Ø –∞–¥–º–∏–Ω?**")

@app.on_message(filters.command("unban", prefix) & filters.me)
async def unban(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –≤ –±–µ—Å–µ–¥–µ"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is True:
        reply = message.reply_to_message
        if reply:
            user = reply.from_user["id"]
        else:
            user = get_arg(message)
            if not user:
                await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å?**")
                return
        try:
            get_user = await app.get_users(user)
            await app.unban_chat_member(chat_id=message.chat.id, user_id=get_user.id)
            await message.edit(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user.first_name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.**")
        except:
            await message.edit("**–Ø –Ω–µ –º–æ–≥—É —Ä–∞–∑–±–∞–Ω–∏—Ç—å.**")
    else:
        await message.edit("**–Ø –∞–¥–º–∏–Ω?**")

mute_permission = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_stickers=False,
    can_send_animations=False,
    can_send_games=False,
    can_use_inline_bots=False,
    can_add_web_page_previews=False,
    can_send_polls=False,
    can_change_info=False,
    can_invite_users=True,
    can_pin_messages=False,
)

@app.on_message(filters.command("mute", prefix) & filters.me)
async def mute_hammer(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –º—É—Ç"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is True:
        reply = message.reply_to_message
        if reply:
            user = reply.from_user["id"]
        else:
            user = get_arg(message)
            if not user:
                await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ –∑–∞–º—É—Ç–∏—Ç—å?**")
                return
        try:
            get_user = await app.get_users(user)
            await app.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=get_user.id,
                permissions=mute_permission,
            )
            await message.edit(f"**{get_user.first_name} –ë—ã–ª –∑–∞–º—É—á–µ–Ω.**")
        except:
            await message.edit("**–Ø –Ω–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å.**")
    else:
        await message.edit("**–Ø –∞–¥–º–∏–Ω?**")

unmute_permissions = ChatPermissions(
    can_send_messages=True,
    can_send_media_messages=True,
    can_send_stickers=True,
    can_send_animations=True,
    can_send_games=True,
    can_use_inline_bots=True,
    can_add_web_page_previews=True,
    can_send_polls=True,
    can_change_info=False,
    can_invite_users=True,
    can_pin_messages=False,
)

@app.on_message(filters.command("unmute", prefix) & filters.me)
async def unmute(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º—É—Ç"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is True:
        reply = message.reply_to_message
        if reply:
            user = reply.from_user["id"]
        else:
            user = get_arg(message)
            if not user:
                await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ —Ä–∞–∑–º—É—Ç–∏—Ç—å?**")
                return
        try:
            get_user = await app.get_users(user)
            await app.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=get_user.id,
                permissions=unmute_permissions,
            )
            await message.edit(f"**{get_user.first_name} –ë—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.**")
        except:
            await message.edit("**–Ø –Ω–µ –º–æ–≥—É —Ä–∞–∑–º—É—Ç–∏—Ç—å.**")
    else:
        await message.edit("**–Ø –∞–¥–º–∏–Ω?**")

@app.on_message(filters.command("kick", prefix) & filters.me)
async def kick_user(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is True:
        reply = message.reply_to_message
        if reply:
            user = reply.from_user["id"]
        else:
            user = get_arg(message)
            if not user:
                await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ –∫–∏–∫–Ω—É—Ç—å?**")
                return
        try:
            get_user = await app.get_users(user)
            await app.kick_chat_member(
                chat_id=message.chat.id,
                user_id=get_user.id,
            )
            await message.edit(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user.first_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç.**")
        except:
            await message.edit("**–Ø –Ω–µ –º–æ–≥—É –∫–∏–∫–∞—Ç—å.**")
    else:
        await message.edit("**–Ø –∞–¥–º–∏–Ω?**")

@app.on_message(filters.command("pin", prefix) & filters.me)
async def pin_message(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if message.chat.type in ["group", "supergroup"]:
        admins = await app.get_chat_members(
            message.chat.id, filter=ChatMemberFilters.ADMINISTRATORS
        )
        admin_ids = [user.user.id for user in admins]
        me = await app.get_me()

        if me.id in admin_ids:
            if message.reply_to_message:
                disable_notification = True

                if len(message.command) >= 2 and message.command[1] in [
                    "alert",
                    "notify",
                    "loud",
                ]:
                    disable_notification = False

                await app.pin_chat_message(
                    message.chat.id,
                    message.reply_to_message.message_id,
                    disable_notification=disable_notification,
                )
                await message.edit("`–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ!`")
            else:
                await message.edit(
                    "`–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`"
                )
        else:
            await message.edit("`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤`")
    else:
        await message.edit("`–Ø –∞–¥–º–∏–Ω?`")
    await asyncio.sleep(3)
    await message.delete()

@app.on_message(filters.command("unpin", prefix) & filters.me)
async def pin(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    try:
        message_id = message.reply_to_message.message_id
        await client.unpin_chat_message(message.chat.id, message_id)
        await message.edit('<code>–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ! </code>')
    except:
        await message.edit('<b>–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏—é</b>')

@app.on_message(filters.command("admin", prefix) & filters.me)
async def promote(client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –í—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –æ–¥–Ω–æ–º—É –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is False:
        await message.edit("**–Ø –Ω–µ –∞–¥–º–∏–Ω.**")
        return
    title = "Admin"
    reply = message.reply_to_message
    if reply:
        user = reply.from_user["id"]
        title = str(get_arg(message))
    else:
        args = get_args(message)
        if not args:
            await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ –ø–æ–≤—ã—Å–∏—Ç—å?**")
            return
        user = args[0]
        if len(args) > 1:
            title = " ".join(args[1:])
    get_user = await app.get_users(user)
    try:
        await app.promote_chat_member(message.chat.id, user, can_pin_messages=True)
        if title == "":
            title = "–ê–¥–º–∏–Ω"
        await message.edit(
            f"**{get_user.first_name} –°—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º —Å –∑–≤–∞–Ω–∏–µ–º [{title}]**"
        )
    except Exception as e:
        await message.edit(f"{e}")
    if title:
        try:
            await app.set_administrator_title(message.chat.id, user, title)
        except:
            pass

@app.on_message(filters.command("unadmin", prefix) & filters.me)
async def demote(client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –û—Ç–æ–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –æ–¥–Ω–æ–º—É –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    if await CheckAdmin(message) is False:
        await message.edit("**–Ø –Ω–µ –∞–¥–º–∏–Ω**")
        return
    reply = message.reply_to_message
    if reply:
        user = reply.from_user["id"]
    else:
        user = get_arg(message)
        if not user:
            await message.edit("**–Ø –º–æ–≥—É —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞?**")
            return
    get_user = await app.get_users(user)
    try:
        await app.promote_chat_member(
            message.chat.id,
            user,
            is_anonymous=False,
            can_change_info=False,
            can_delete_messages=False,
            can_edit_messages=False,
            can_invite_users=False,
            can_promote_members=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_post_messages=False,
        )
        await message.edit(
            f"**{get_user.first_name} –ë–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω!**"
        )
    except Exception as e:
        await message.edit(f"{e}")

@app.on_message(filters.command("invite", prefix) & filters.me)
async def invite(client, message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    reply = message.reply_to_message
    if reply:
        user = reply.from_user["id"]
    else:
        user = get_arg(message)
        if not user:
            await message.edit("**–Ø –¥–æ–ª–∂–µ–Ω –∫–æ–≥–æ —Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å?**")
            return
    get_user = await app.get_users(user)
    try:
        await app.add_chat_members(message.chat.id, get_user.id)
        await message.edit(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user.first_name} –ë—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç!**")
    except Exception as e:
        await message.edit(f"{e}")

# –ö–æ–º–∞–Ω–¥–∞ –≤–∑–ª–æ–º–∞ –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞
@app.on_message(filters.command("hack", prefix) & filters.me)
async def hack(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ hack"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    perc = 0
    while(perc < 100):
        try:
            text = "üëÆ –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            await asyncio.sleep(0.1)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "‚úÖ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!"
    await message.edit(str(text))
    await asyncio.sleep(3)
    perc = 0
    while(perc < 100):
        try:
            text = "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            await asyncio.sleep(0.15)
        except FloodWait as e:
            await asyncio.sleep(e.x)

    await asyncio.sleep(1)
    text = "üêì–ù–∞—à–ª–∏ —Ñ–∞–π—Ç—ã —á—Ç–æ —Ç—ã –ø–µ—Ç—É—Ö!"
    await message.edit(text)

# –ö–æ–º–∞–Ω–¥–∞ –í–∑–ª–æ–º–∞ –∂–æ–ø—ã
@app.on_message(filters.command("jopa", prefix) & filters.me)
async def jopa(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ jopa"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    perc = 0
    while(perc < 100):
        try:
            text = "üçë –í–∑–ª–æ–º –∂–æ–ø—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            await asyncio.sleep(0.1)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "‚úÖ –ñ–æ–ø–∞ –≤–∑–ª–æ–º–∞–Ω–∞"
    await message.edit(str(text))
    await asyncio.sleep(3)
    text = "üîç –ü–æ–∏—Å–∫ –°–ª–∏–≤–æ–≤ ..."
    await message.edit(str(text))
    perc = 0
    await asyncio.sleep(3)
    while(perc < 100):
        try:
            text = "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–ª–∏–≤–æ–≤ ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 4)
            await asyncio.sleep(0.15)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "‚úÖ –°–ª–∏–≤—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã"
    await message.edit(str(text))
    perc = 0
    await asyncio.sleep(5)
    while(perc < 100):
        try:
            text = "‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞ —Å–ª–∏–≤–æ–≤ –±–∞—Ä—ã–≥–µ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            await asyncio.sleep(0.15)
        except FloodWait as e:
            await asyncio.sleep(e.x)

    text = "‚úÖ –ü—Ä–æ–¥–∞–Ω–Ω–æ"
    await message.edit(str(text))
    await asyncio.sleep(2)
    rand =+ random.randint(100, 5000)
    bal = rand
    text = "üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ " + str(bal) + " ‚ÇΩ"
    await message.edit(text)

# –ù–∞—Ä–∫–æ—Ç–∞
@app.on_message(filters.command("drugs", prefix) & filters.me)
async def drugs(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ drugs"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    perc = 0
    result = 0
    while(perc < 100):
        try:
            text = "üçÅ–ü–æ–∏—Å–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            await asyncio.sleep(0.1)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "–ù–∞–π–¥–µ–Ω–æ 3 –∫–≥ —à–ø–µ–∫—Å–∞üç™üí®"
    await message.edit(str(text))
    await asyncio.sleep(3)
    text = "–û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∫–∏–¥ üåø‚öóÔ∏è"
    await message.edit(str(text))
    await asyncio.sleep(5)
    result += random.randint(1, 4)

    if result == 1:
        text = "üî•üò≥ –í–∞—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–∞–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã üò≥üî•"
        await message.edit(str(text))
    if result == 2:
        text = "ü•¥–í—ã –ø–æ–∂–∏–ª–æ–π –Ω–∞—Ä–∫–æ–º–∞–Ω, –≤–∞—Å –Ω–µ –±–µ—Ä—ë—Ç –æ–¥–Ω–∞ –¥–æ–∑–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ  –µ—â—ë —Ä–∞–∑ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∫–∏–¥ü•¥"
        await message.edit(str(text))
    if result == 3:
        text = "üòñ–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤–∞—à –¥–µ–Ω—å, –≤—ã —Ö–æ—Ç—å –∏ –ø–æ–∂–∏–ª–æ–π, –Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å–º–µ—Ä—Ç–∏ - –ø–µ—Ä–µ–¥–æ–∑üòñ"
        await message.edit(str(text))
    if result == 4:
        text = "üòå–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –≤–∫–∏–¥, –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å)üòå"
        await message.edit(str(text))

# –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –º–∞–º–∫–∏
@app.on_message(filters.command("mum", prefix) & filters.me)
async def mum(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("–î–∞—Ç–∞ %d.%m.%Y ‚Ä¢ –í—Ä–µ–º—è %H:%M:%S")
    log = logi + timnow + "\n‚ï∞ –ö–æ–º–º–∞–Ω–¥–∞ mum"
    await app.send_message("ClipUSERBOT_LOGGERbot", log)

    text = "üîç –ü–æ–∏—Å–∫ —Ç–≤–æ–µ–π –º–∞–º–∫–∏ –Ω–∞—á–∞–ª—Å—è..."
    await message.edit(str(text))
    await asyncio.sleep(3.0)
    perc = 0
    while(perc < 100):
        try:
            text = "üîç –ò—â–µ–º —Ç–≤–æ—é –º–∞–º–∞—à—É –Ω–∞ –ê–≤–∏—Ç–æ... " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            await asyncio.sleep(0.75)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "‚ùå –ú–∞–º–∞—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–∞"
    await message.edit(str(text))
    await asyncio.sleep(3.0)

    perc = 0
    while(perc < 100):
        try:
            text = "üîç –ü–æ–∏—Å–∫ —Ç–≤–æ–µ–π –º–∞–º–∞—à–∏ –Ω–∞ —Å–≤–∞–ª–∫–µ... " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            await asyncio.sleep(0.75)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "‚ùå –ú–∞–º–∞—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–∞"
    await message.edit(str(text))

    perc = 0
    while(perc < 100):
        try:
            text = "üîç –ü–æ–∏—Å–∫ —Ç–≤–æ–µ–π –º–∞–º–∫–∏ –≤ –∫–∞–Ω–∞–≤–µ... " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            await asyncio.sleep(0.75)
        except FloodWait as e:
            await asyncio.sleep(e.x)
    text = "‚úÖ –ú–∞–º–∫–∞ –Ω–∞–π–¥–µ–Ω–∞... –û–Ω–∞ –≤ –∫–∞–Ω–∞–≤–µ"
    await message.edit(str(text))

app.run()
